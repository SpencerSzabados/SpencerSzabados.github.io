<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://spencerszabados.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://spencerszabados.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2025-08-28T03:23:18+00:00</updated><id>https://spencerszabados.github.io/feed.xml</id><title type="html">blank</title><subtitle>The personal webpage of Spencer Szabados. Based on [*folio](https://github.com/bogoli/-folio) design.
</subtitle><entry><title type="html">Obsidian Keyword Based Flashcard Plugin</title><link href="https://spencerszabados.github.io/blog/2025/obsidian-keyword-flashcards/" rel="alternate" type="text/html" title="Obsidian Keyword Based Flashcard Plugin" /><published>2025-05-03T00:00:00+00:00</published><updated>2025-05-03T00:00:00+00:00</updated><id>https://spencerszabados.github.io/blog/2025/obsidian-keyword-flashcards</id><content type="html" xml:base="https://spencerszabados.github.io/blog/2025/obsidian-keyword-flashcards/"><![CDATA[<p>With the rise in discussion around <a href="https://x.com/karpathy/status/1886192184808149383">“Vibe coding”</a> I decided to give it a go, by making a simple flashcard Obsidian plugin for reviewing my notes. This page contains a discussion of my “vibe coding” experience and the motivation for the final plugin I ended up creating. The accompanying project github repo can be found here <a href="https://github.com/SpencerSzabados/obsidian-keyword-flashcards">obsidian-keyword-flashcards</a>.</p>

<hr />

<h1 id="overview">Overview</h1>
<p>During the course of my masters degree, and the trailing edge of my undergraduate degree, I accumulated a large collection of notes within my <a href="https://obsidian.md/">Obsidian</a> vault. Most of these are highly structured notes on topics in mathematics and computer science coming from courses I took or papers I have read. However, unlike the prolific amount of flashcards I used to memorize all the definitions and theorem statements presented in lectures, I was not able to find a (simple) system for reviewing my Obsidian notes. Many of the existing tools, e.g., <a href="https://github.com/reuseman/flashcards-obsidian">flashcards-obsidian</a> or <a href="https://github.com/st3v3nmw/obsidian-spaced-repetition">obsidian-spaced-repetition</a>, were either too feature rich or lacked a method of assembling cards from notes I had already created (short of requiring me to rewrite all my notes into a new format).</p>

<h1 id="my-note-taking-format">My note taking format</h1>
<p>As most of my notes relate to topics in mathematics they tend to follow a templated format. For example here is a definition block from one of my notes:</p>

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/posts/obsidian-keyword-flashcards/obsidian_definition_note-480.webp 480w,/assets/img/posts/obsidian-keyword-flashcards/obsidian_definition_note-800.webp 800w,/assets/img/posts/obsidian-keyword-flashcards/obsidian_definition_note-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/posts/obsidian-keyword-flashcards/obsidian_definition_note.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" style="margin:auto; display:block;
            
            
            
                max-width: 500px;
            
            
            " loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

<p>I structure most “atomic” elements of my notes in this way, a bold header with a tag prefix (e.g., method, theorem, example, problem, etc.) followed by a description and links to other related notes or blocks of text.</p>

<p>As a consequence of taking my notes in such a templated style, I am able to easily parse my notes for keywords (or strings) and build flashcards with the bold title on one side and the block content on the reverse. Saving me from having to write any of my notes to other formats used by other flashcard plugins. The only major concern for this approach is its speed when a user has many files; with this said, I have over 300 blocks like this in my notes and the parsing only takes a handful of seconds to complete.</p>

<h1 id="building-the-plugin">Building the plugin</h1>
<p>To build this plugin, following the “vibe coding” ethos of ‘be lazy and prompt more’, I used Claude 3.7 and began my prompt by supplying a link to the <a href="https://docs.obsidian.md/Plugins/Getting+started/Build+a+plugin#Prerequisites">Obsidian API</a> docs for building plugins. Within an hour or so I was able, after some manual intervention and debugging the API calls, to get a working version of a basic flashcard parser with a serviceable UI.</p>

<p>In the following few days, in my off time, I was able to quickly add support for markdown rendering (which required more manual intervention to get working), a configurable <code class="language-plaintext highlighter-rouge">.json</code> file that stores the parsing arguments, as well as a spaced repetition function for the notes. Here is what the final version ended up looking like:</p>

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/posts/obsidian-keyword-flashcards/obsidian_flashcard_front_final-480.webp 480w,/assets/img/posts/obsidian-keyword-flashcards/obsidian_flashcard_front_final-800.webp 800w,/assets/img/posts/obsidian-keyword-flashcards/obsidian_flashcard_front_final-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/posts/obsidian-keyword-flashcards/obsidian_flashcard_front_final.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" style="margin:auto; display:block;
            
            
            
                max-width: 500px;
            
            
            " loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/posts/obsidian-keyword-flashcards/obsidian_flashcard_back_final-480.webp 480w,/assets/img/posts/obsidian-keyword-flashcards/obsidian_flashcard_back_final-800.webp 800w,/assets/img/posts/obsidian-keyword-flashcards/obsidian_flashcard_back_final-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/posts/obsidian-keyword-flashcards/obsidian_flashcard_back_final.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" style="margin:auto; display:block;
            
            
            
                max-width: 500px;
            
            
            " loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

<p>You can find the final plugin repository linked at the start of the page. The README has instructions on how to install and configure it for different flashcard headers etc.</p>

<h1 id="conclusion">Conclusion</h1>

<p>Overall its hard to complain with the result given how quickly I was able to build it. Throughout the process of building the plugin I also learned more about the Obsidian plugin API and dusted off some of my <code class="language-plaintext highlighter-rouge">TypeScript</code> knowledge, however, only for those aspects where I manually debugged/wrote the code. This hybrid style of coding – prompting and debugging/writing – can certainly boost productivity. I’ve  used other agents for writing small components of projects, but in order to efficiently debug said code you must already have sufficient working knowledge of the programming language and task. At which point the value add is already questionable: I will be left with code I could have written myself – admittedly in more time – but without further improving my skills and knowing how best to maintain the code.</p>

<p>The entire “vibe coding” experience was somewhat disheartening. Each time the bot gave me a code fragment it felt akin to opening up someone else’s codebase and attempting to debug a feature that changed each iteration of the model prompt. A more frustrating experience compared to debugging my own code.</p>]]></content><author><name></name></author><category term="other" /><category term="notes" /><category term="obsidian" /><category term="flashcards" /><category term="markdown" /><summary type="html"><![CDATA[Outline of my new obsidian flashcard plugin and note taking method.]]></summary></entry><entry><title type="html">Fine-Tune Stable Diffusion Auto-Encoder</title><link href="https://spencerszabados.github.io/blog/2024/fine-tune-stable-diffusion-vae/" rel="alternate" type="text/html" title="Fine-Tune Stable Diffusion Auto-Encoder" /><published>2024-05-26T00:00:00+00:00</published><updated>2024-05-26T00:00:00+00:00</updated><id>https://spencerszabados.github.io/blog/2024/fine-tune-stable-diffusion-vae</id><content type="html" xml:base="https://spencerszabados.github.io/blog/2024/fine-tune-stable-diffusion-vae/"><![CDATA[<p>In a recent project, we (my coauthor and myself) needed to train a denoising diffusion bridge model on 512x512x3 patches taken from 2048x2048 fundus images of human eyes. As GPU memory requirements for training a diffusion model such high resolutions with a U-NET backbone is prohibitive, scaling quadratically with image resolution, we turned to latent space diffusion models. In particular, we wished to use a fine-tuned version of the auto-encoder from Stable Diffusion. Unfortunately, it was somewhat of a lengthy process finding exactly what training parameters worked well for fine-tuning Stable Diffusions VAE, or a short guild with training scripts. To address this, I have written this short article and accompanying <a href="https://github.com/SpencerSzabados/Fine-tune-Stable-Diffusion-VAE">github</a> repo, which is based on material from <a href="https://wandb.ai/capecape/ddpm_clouds/reports/Using-Stable-Diffusion-VAE-to-encode-satellite-images--VmlldzozNDA2OTgx">capecape</a> and <a href="https://github.com/cccntu/fine-tune-models">cccntu</a>.</p>

<hr />

<h1 id="overview">Overview</h1>
<p>Stable Diffusion (v1-4), as developed by <a href="https://stability.ai/news/stable-diffusion-public-release">stability.ai</a>, is a latent space diffusion model based primarily on the works  <a class="citation" href="#Vahdat:2021">(Vahdat et al., 2021; Rombach et al., 2022; Blattmann et al., 2023)</a>, which seek to both improve the efficacy of training high resolution diffusion models as well as overcome the loss in generated image quality from the use of the Variational Autoencoder employed during training.</p>

<p>Stable Diffusion is commonly used as a base line model for testing newly developed sampling techniques as (1) its ordinarily capable of generating high quality images on a wide verity of subjects, and (2) its code is open source <a href="https://github.com/CompVis/stable-diffusion">github-CompVis</a>, <a href="https://github.com/Stability-AI/stablediffusion">github-Stability-AI</a> with numerous pre-trained checkpoints trained over huge datasets, which are practically infeasible to replicate at an individual scale, made easily available.</p>

<p>However, despite all the data these models have been trained on it is not guaranteed to perform well on any given task; e.g., generating (or just encoding) medical images such as x-rays. To counter act this, researchers (and practitioners) typically fine-tune – running a few additional training steps – the model on some additional examples for the problem being considered. It is important, to ensure consistent results, when fine-tuning a model to select similar training parameters (e.g., the loss used, the step size, etc.) to those used when the model was initially trained; otherwise, training might fail or the performance of the model may degrade when applied outside of this new data (generalization performance decreases).</p>

<p>In an effort to save fellow researchers time, I provide a selection of training parameters – which I have found to work well – and a complete training script for fine-tuning Stable Diffusion (v1-4)’s variational auto-encoder.</p>

<h1 id="fine-tuning-the-model">Fine-tuning the Model</h1>
<p>The complete repository for fine-tuning can be found at <a href="https://github.com/SpencerSzabados/Fine-tune-Stable-Diffusion-VAE">github</a>. Consult the ‘README.md’ for general usage.</p>

<p>Here is a side-by-side example of 512x512x3 image patch from the <a href="https://www.nature.com/articles/s41597-022-01564-3">Fives dataset</a> and corresponding reconstruction after being passed through the VAE before and after 10k fine-tuning steps. While the two reconstructions (bottom images) appear quite similar, there is some artifacts along the edge of the first and along the vasculature that aren’t as present in the second image. These differences might appear minor, but are significant enough to impact model performance when evaluated under Fréchet inception distance (FID).</p>

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/posts/fine-tune-sdvae/sdvae_step0_1000-480.webp 480w,/assets/img/posts/fine-tune-sdvae/sdvae_step0_1000-800.webp 800w,/assets/img/posts/fine-tune-sdvae/sdvae_step0_1000-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/posts/fine-tune-sdvae/sdvae_step0_1000.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" style="margin:auto; display:block;
            
            
            
                max-width: 400px;
            
            
            " loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>]]></content><author><name></name></author><category term="work" /><category term="graphics" /><category term="machine_learning" /><summary type="html"><![CDATA[A quick start guild to fine-tuning stable diffusions variational auto-encoder.]]></summary></entry><entry><title type="html">Bayer Dithering</title><link href="https://spencerszabados.github.io/blog/2022/bayer-dithering/" rel="alternate" type="text/html" title="Bayer Dithering" /><published>2022-08-20T00:00:00+00:00</published><updated>2022-08-20T00:00:00+00:00</updated><id>https://spencerszabados.github.io/blog/2022/bayer-dithering</id><content type="html" xml:base="https://spencerszabados.github.io/blog/2022/bayer-dithering/"><![CDATA[<p>There exists various articles online that discuss Bayer based image dithering, but I was not able to find one that simultaneously discussed how the threshold matrices used in the technique were constructed and provided source code with a working example. Consequently, I wrote this short article for anyone seeking such a quick reference.</p>

<hr />

<h1 id="overview">Overview</h1>
<p>Image dithering is a method that can be applied to reduce <a href="https://en.wikipedia.org/wiki/Colour_banding">colour banding</a> present in low bit depth (pallet limited) images, and was a common post processing step when it was not possible to print images using a sufficient number of colours (either due to mechanical limitations or cost) to avoid artifacts.</p>

<p>Next to noise (random) dithering, with simply randomly sample the image and apply a fixed threshold to each pixel value, ordered dithering methods are the next simplest to implement and use. Principle among these is Bayer dither, which is the technique discussed and implemented below.</p>

<h1 id="ordered-bayer-dithering">Ordered (Bayer) Dithering</h1>
<p>Bayer dithering, and ordered dithering in general, make use of a matrix of threshold values that are compared to each pixel value in the image to quantize colours. More specifically, for a \(n\)-by-\(n\) matrix \(T\), the, \({\rm RBG}\), colour channel values of each pixel, \({\rm pixel}(x,y)\), are quantized to \(c\) values based on the rule:</p>

\[\begin{align*}
    {\rm pixel}(x,y) = \frac{\lfloor T(x\text{ mod } n,\, y\text{ mod } n)+(c-1)\text{pixel}(x,y)\rfloor}{c-1}.
\end{align*}\]

<p>Bayer threshold matrices are a special class of matrices, constructed by <a class="citation" href="#Bayer:1973">(Bayer, 1973)</a> for the task of create an “<em>optimal distribution</em>”, which can be taken to mean “pleasant to the eye”, of dots within the resulting image. The most commonly used matrices are those constructed using the following recursive block matrix formula, as seen on <a href="https://en.wikipedia.org/wiki/Ordered_dithering#Threshold_map">Wiki</a>,</p>

\[\begin{align*}
    M_{n+1} = \frac{1}{(2n)^2}\begin{bmatrix}(2n)^2M_n &amp; (2n)^2M_n+2\\ (2n)^2M_n+3 &amp; (2n)^2M_n+1 \end{bmatrix},
\end{align*}\]

<p>with the initial matrix value</p>

\[\begin{align*}
    M_1 = \frac{1}{4}\begin{bmatrix}0 &amp; 2\\ 3 &amp; 1\end{bmatrix},
\end{align*}\]

<p>which has entry values ranging from \(0,1,\dots,2^{2n}-1\).</p>

<h1 id="implementing-bayer-dithering">Implementing Bayer Dithering</h1>
<p>Bayer based image dithering is straightforward to implement for three channel images following the above description of the method. A working example implemented using JavaScript and the <a href="https://p5js.org/">p5.js</a> graphics library.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">c</span>     <span class="o">=</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">//number of grey levels</span>
<span class="kd">let</span> <span class="nx">d</span>     <span class="o">=</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">//dimension of threshold map</span>
<span class="kd">let</span> <span class="nx">M</span>     <span class="o">=</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">//threshold map</span>
<span class="kd">let</span> <span class="nx">img</span>   <span class="o">=</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">//image reference</span>
<span class="kd">let</span> <span class="nx">img_Y</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">//bitmap array of relative luminance values of img</span>
<span class="kd">let</span> <span class="nx">img_D</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">//final dithered image</span>

<span class="kd">function</span> <span class="nf">preload</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">//initilize constants</span>
  <span class="nx">c</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
  <span class="nx">d</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
  <span class="c1">//define threshold map</span>
  <span class="nx">M</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">,</span><span class="mi">32</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">34</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">42</span><span class="p">],</span>
       <span class="p">[</span><span class="mi">48</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">56</span><span class="p">,</span><span class="mi">24</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="mi">18</span><span class="p">,</span><span class="mi">58</span><span class="p">,</span><span class="mi">26</span><span class="p">],</span>
       <span class="p">[</span><span class="mi">12</span><span class="p">,</span><span class="mi">44</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">36</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mi">46</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">38</span><span class="p">],</span>
       <span class="p">[</span><span class="mi">60</span><span class="p">,</span><span class="mi">28</span><span class="p">,</span><span class="mi">52</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">62</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">54</span><span class="p">,</span><span class="mi">22</span><span class="p">],</span>
       <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">35</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">43</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">33</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">41</span><span class="p">],</span>
       <span class="p">[</span><span class="mi">51</span><span class="p">,</span><span class="mi">19</span><span class="p">,</span><span class="mi">59</span><span class="p">,</span><span class="mi">27</span><span class="p">,</span><span class="mi">49</span><span class="p">,</span><span class="mi">17</span><span class="p">,</span><span class="mi">57</span><span class="p">,</span><span class="mi">25</span><span class="p">],</span>
       <span class="p">[</span><span class="mi">15</span><span class="p">,</span><span class="mi">47</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">39</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">45</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">37</span><span class="p">],</span>
       <span class="p">[</span><span class="mi">63</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="mi">61</span><span class="p">,</span><span class="mi">29</span><span class="p">,</span><span class="mi">53</span><span class="p">,</span><span class="mi">21</span><span class="p">]];</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">j</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">){</span>
      <span class="nx">M</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="nx">M</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span><span class="o">/</span><span class="p">(</span><span class="nx">d</span><span class="o">*</span><span class="nx">d</span><span class="p">);</span> 
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="c1">//load image and allocate space for luminance image</span>
  <span class="nx">img</span>   <span class="o">=</span> <span class="nf">loadImage</span><span class="p">(</span><span class="dl">"</span><span class="s2">assests/mike.jpg</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">img_Y</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Array</span><span class="p">(</span><span class="nx">img</span><span class="p">.</span><span class="nx">width</span><span class="o">*</span><span class="nx">img</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">//no loop canvas</span>
  <span class="nf">noLoop</span><span class="p">();</span>
  <span class="nf">pixelDensity</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="nf">createCanvas</span><span class="p">(</span><span class="nx">img</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">img</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">draw</span><span class="p">(){</span>
  <span class="nx">img_D</span> <span class="o">=</span> <span class="nf">createImage</span><span class="p">(</span><span class="nx">img</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">img</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span>
  <span class="nx">img_D</span><span class="p">.</span><span class="nf">loadPixels</span><span class="p">();</span>
  <span class="nx">img</span><span class="p">.</span><span class="nf">loadPixels</span><span class="p">();</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">img</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">j</span><span class="o">&lt;</span><span class="nx">img</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">){</span>
      <span class="kd">let</span> <span class="nx">idx</span> <span class="o">=</span> <span class="mi">4</span><span class="o">*</span><span class="p">(</span><span class="nx">i</span><span class="o">*</span><span class="nx">img</span><span class="p">.</span><span class="nx">width</span><span class="o">+</span><span class="nx">j</span><span class="p">);</span>
      <span class="kd">let</span> <span class="nx">T</span> <span class="o">=</span> <span class="nx">M</span><span class="p">[</span><span class="nx">j</span><span class="o">%</span><span class="nx">d</span><span class="p">][</span><span class="nx">i</span><span class="o">%</span><span class="nx">d</span><span class="p">];</span>
      <span class="nx">img_D</span><span class="p">.</span><span class="nx">pixels</span><span class="p">[</span><span class="nx">idx</span>  <span class="p">]</span> <span class="o">=</span> <span class="mi">255</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nx">T</span><span class="o">+</span><span class="nx">img</span><span class="p">.</span><span class="nx">pixels</span><span class="p">[</span><span class="nx">idx</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">255</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
      <span class="nx">img_D</span><span class="p">.</span><span class="nx">pixels</span><span class="p">[</span><span class="nx">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">255</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nx">T</span><span class="o">+</span><span class="nx">img</span><span class="p">.</span><span class="nx">pixels</span><span class="p">[</span><span class="nx">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">255</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
      <span class="nx">img_D</span><span class="p">.</span><span class="nx">pixels</span><span class="p">[</span><span class="nx">idx</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">255</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nx">T</span><span class="o">+</span><span class="nx">img</span><span class="p">.</span><span class="nx">pixels</span><span class="p">[</span><span class="nx">idx</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">255</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
      <span class="nx">img_D</span><span class="p">.</span><span class="nx">pixels</span><span class="p">[</span><span class="nx">idx</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">255</span><span class="p">;</span>
      <span class="p">}</span>  
  <span class="p">}</span>
  <span class="nx">img_D</span><span class="p">.</span><span class="nf">updatePixels</span><span class="p">();</span>
  <span class="nf">image</span><span class="p">(</span><span class="nx">img_D</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The above method performs decently well on a variety of different subjects. As an example, take the Bayer dithered image of Mike Wazowski with parameter values \(c=4\) and \(d=8\).</p>

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/posts/image-dither/mike_c4d8color-480.webp 480w,/assets/img/posts/image-dither/mike_c4d8color-800.webp 800w,/assets/img/posts/image-dither/mike_c4d8color-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/posts/image-dither/mike_c4d8color.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" style="margin:auto; display:block;
            
            
            
                max-width: 400px;
            
            
            " loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

<p>Take as another example, the dithered picture of a hotel I saw whilst in Honolulu for ICML2023.</p>

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/posts/image-dither/dithered_hotel-480.webp 480w,/assets/img/posts/image-dither/dithered_hotel-800.webp 800w,/assets/img/posts/image-dither/dithered_hotel-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/posts/image-dither/dithered_hotel.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" style="margin:auto; display:block;
            
            
            
                max-width: 400px;
            
            
            " loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>]]></content><author><name></name></author><category term="graphics" /><category term="procedural_generation" /><summary type="html"><![CDATA[There exists various articles online that discuss Bayer based image dithering, but I was not able to find one that simultaneously discussed how the threshold matrices used in the technique were constructed and provided source code with a working example. Consequently, I wrote this short article for anyone seeking such a quick reference. Overview Image dithering is a method that can be applied to reduce colour banding present in low bit depth (pallet limited) images, and was a common post processing step when it was not possible to print images using a sufficient number of colours (either due to mechanical limitations or cost) to avoid artifacts. Next to noise (random) dithering, with simply randomly sample the image and apply a fixed threshold to each pixel value, ordered dithering methods are the next simplest to implement and use. Principle among these is Bayer dither, which is the technique discussed and implemented below. Ordered (Bayer) Dithering Bayer dithering, and ordered dithering in general, make use of a matrix of threshold values that are compared to each pixel value in the image to quantize colours. More specifically, for a \(n\)-by-\(n\) matrix \(T\), the, \({\rm RBG}\), colour channel values of each pixel, \({\rm pixel}(x,y)\), are quantized to \(c\) values based on the rule: \[\begin{align*} {\rm pixel}(x,y) = \frac{\lfloor T(x\text{ mod } n,\, y\text{ mod } n)+(c-1)\text{pixel}(x,y)\rfloor}{c-1}. \end{align*}\] Bayer threshold matrices are a special class of matrices, constructed by (Bayer, 1973) for the task of create an “optimal distribution”, which can be taken to mean “pleasant to the eye”, of dots within the resulting image. The most commonly used matrices are those constructed using the following recursive block matrix formula, as seen on Wiki, \[\begin{align*} M_{n+1} = \frac{1}{(2n)^2}\begin{bmatrix}(2n)^2M_n &amp; (2n)^2M_n+2\\ (2n)^2M_n+3 &amp; (2n)^2M_n+1 \end{bmatrix}, \end{align*}\] with the initial matrix value \[\begin{align*} M_1 = \frac{1}{4}\begin{bmatrix}0 &amp; 2\\ 3 &amp; 1\end{bmatrix}, \end{align*}\] which has entry values ranging from \(0,1,\dots,2^{2n}-1\). Implementing Bayer Dithering Bayer based image dithering is straightforward to implement for three channel images following the above description of the method. A working example implemented using JavaScript and the p5.js graphics library. let c = null; //number of grey levels let d = null; //dimension of threshold map let M = null; //threshold map let img = null; //image reference let img_Y = null; //bitmap array of relative luminance values of img let img_D = null; //final dithered image function preload() { //initilize constants c = 4; d = 8; //define threshold map M = [[0,32,8,40,2,34,10,42], [48,16,56,24,50,18,58,26], [12,44,4,36,14,46,6,38], [60,28,52,20,62,30,54,22], [3,35,11,43,1,33,9,41], [51,19,59,27,49,17,57,25], [15,47,7,39,13,45,5,37], [63,31,55,23,61,29,53,21]]; for(let i=0; i&lt;d; i++){ for(let j=0; j&lt;d; j++){ M[i][j] = M[i][j]/(d*d); } } //load image and allocate space for luminance image img = loadImage("assests/mike.jpg"); img_Y = new Array(img.width*img.height); } function setup() { //no loop canvas noLoop(); pixelDensity(1); createCanvas(img.width,img.height); } function draw(){ img_D = createImage(img.width,img.height); img_D.loadPixels(); img.loadPixels(); for(let i=0; i&lt;img.height; i++){ for(let j=0; j&lt;img.width; j++){ let idx = 4*(i*img.width+j); let T = M[j%d][i%d]; img_D.pixels[idx ] = 255*Math.floor(T+img.pixels[idx]*(c-1)/255)/(c-1); img_D.pixels[idx+1] = 255*Math.floor(T+img.pixels[idx+1]*(c-1)/255)/(c-1); img_D.pixels[idx+2] = 255*Math.floor(T+img.pixels[idx+2]*(c-1)/255)/(c-1); img_D.pixels[idx+3] = 255; } } img_D.updatePixels(); image(img_D,0,0); } The above method performs decently well on a variety of different subjects. As an example, take the Bayer dithered image of Mike Wazowski with parameter values \(c=4\) and \(d=8\). Take as another example, the dithered picture of a hotel I saw whilst in Honolulu for ICML2023.]]></summary></entry><entry><title type="html">Perlin Worms</title><link href="https://spencerszabados.github.io/blog/2022/perlin-worms/" rel="alternate" type="text/html" title="Perlin Worms" /><published>2022-07-20T00:00:00+00:00</published><updated>2022-07-20T00:00:00+00:00</updated><id>https://spencerszabados.github.io/blog/2022/perlin-worms</id><content type="html" xml:base="https://spencerszabados.github.io/blog/2022/perlin-worms/"><![CDATA[<p>The impetus for this post came from my personal struggles to find a solid reference and working code demonstration of what are called “noise worms”, as I had stumbled upon an illustration and brief description of them when researching some early (2000’s era) procedural generation techniques. The best write up I came across is that given on <a href="http://libnoise.sourceforge.net/examples/worms/">libnoise</a> from which this post is inspired.</p>

<hr />

<h1 id="overview">Overview</h1>
<p><em>Noise Worms</em> are a procedurally generated illustrations of worm like objects, which are composed of joined line segments (polylines) orientated by a noise function, Perlin Noise <a class="citation" href="#Perlin:1989">(Perlin &amp; Hoffert, 1989)</a> in our case. An example of a collection of noise worms is given below:</p>

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/posts/perlin-worms/perlin_worms_dist_bias_1-480.webp 480w,/assets/img/posts/perlin-worms/perlin_worms_dist_bias_1-800.webp 800w,/assets/img/posts/perlin-worms/perlin_worms_dist_bias_1-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/posts/perlin-worms/perlin_worms_dist_bias_1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" style="margin:auto; display:block;
            
            
            
                max-width: 400px;
            
            
            " loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

<h1 id="implementing-perlin-noise">Implementing Perlin noise</h1>
<p>Out of historical interest, we will be using a JavaScript port of Perlin’s <em>Improved noise</em> Java reference implementation, given in <a class="citation" href="#Perlin:2002">(Perlin, 2002)</a>, which I implemented using the <a href="https://p5js.org/">p5.js</a> graphics library.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Port of Ken Perlin's 2002 Java Reference Implementation of Improved Noise</span>
<span class="c1">//to JavaScript</span>

<span class="c1">//BUILD PERMUTATION (AND HASH) ARRAY </span>
<span class="kd">let</span> <span class="nx">p</span> <span class="o">=</span> <span class="p">[];</span> <span class="c1">//LENGTH OF 512</span>
<span class="kd">let</span> <span class="nx">permutation</span> <span class="o">=</span> <span class="p">[</span><span class="mi">151</span><span class="p">,</span><span class="mi">160</span><span class="p">,</span><span class="mi">137</span><span class="p">,</span><span class="mi">91</span><span class="p">,</span><span class="mi">90</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span> <span class="mi">131</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">201</span><span class="p">,</span><span class="mi">95</span><span class="p">,</span><span class="mi">96</span><span class="p">,</span><span class="mi">53</span><span class="p">,</span><span class="mi">194</span><span class="p">,</span><span class="mi">233</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">225</span><span class="p">,</span><span class="mi">140</span><span class="p">,</span><span class="mi">36</span><span class="p">,</span><span class="mi">103</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">69</span><span class="p">,</span><span class="mi">142</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">99</span><span class="p">,</span><span class="mi">37</span><span class="p">,</span><span class="mi">240</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span>
  <span class="mi">190</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span><span class="mi">148</span><span class="p">,</span><span class="mi">247</span><span class="p">,</span><span class="mi">120</span><span class="p">,</span><span class="mi">234</span><span class="p">,</span><span class="mi">75</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">26</span><span class="p">,</span><span class="mi">197</span><span class="p">,</span><span class="mi">62</span><span class="p">,</span><span class="mi">94</span><span class="p">,</span><span class="mi">252</span><span class="p">,</span><span class="mi">219</span><span class="p">,</span><span class="mi">203</span><span class="p">,</span><span class="mi">117</span><span class="p">,</span><span class="mi">35</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">32</span><span class="p">,</span><span class="mi">57</span><span class="p">,</span><span class="mi">177</span><span class="p">,</span><span class="mi">33</span><span class="p">,</span>
  <span class="mi">88</span><span class="p">,</span><span class="mi">237</span><span class="p">,</span><span class="mi">149</span><span class="p">,</span><span class="mi">56</span><span class="p">,</span><span class="mi">87</span><span class="p">,</span><span class="mi">174</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">125</span><span class="p">,</span><span class="mi">136</span><span class="p">,</span><span class="mi">171</span><span class="p">,</span><span class="mi">168</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span><span class="mi">175</span><span class="p">,</span><span class="mi">74</span><span class="p">,</span><span class="mi">165</span><span class="p">,</span><span class="mi">71</span><span class="p">,</span><span class="mi">134</span><span class="p">,</span><span class="mi">139</span><span class="p">,</span><span class="mi">48</span><span class="p">,</span><span class="mi">27</span><span class="p">,</span><span class="mi">166</span><span class="p">,</span>
  <span class="mi">77</span><span class="p">,</span><span class="mi">146</span><span class="p">,</span><span class="mi">158</span><span class="p">,</span><span class="mi">231</span><span class="p">,</span><span class="mi">83</span><span class="p">,</span><span class="mi">111</span><span class="p">,</span><span class="mi">229</span><span class="p">,</span><span class="mi">122</span><span class="p">,</span><span class="mi">60</span><span class="p">,</span><span class="mi">211</span><span class="p">,</span><span class="mi">133</span><span class="p">,</span><span class="mi">230</span><span class="p">,</span><span class="mi">220</span><span class="p">,</span><span class="mi">105</span><span class="p">,</span><span class="mi">92</span><span class="p">,</span><span class="mi">41</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">46</span><span class="p">,</span><span class="mi">245</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">244</span><span class="p">,</span>
  <span class="mi">102</span><span class="p">,</span><span class="mi">143</span><span class="p">,</span><span class="mi">54</span><span class="p">,</span> <span class="mi">65</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">63</span><span class="p">,</span><span class="mi">161</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span><span class="mi">216</span><span class="p">,</span><span class="mi">80</span><span class="p">,</span><span class="mi">73</span><span class="p">,</span><span class="mi">209</span><span class="p">,</span><span class="mi">76</span><span class="p">,</span><span class="mi">132</span><span class="p">,</span><span class="mi">187</span><span class="p">,</span><span class="mi">208</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span><span class="mi">18</span><span class="p">,</span><span class="mi">169</span><span class="p">,</span><span class="mi">200</span><span class="p">,</span><span class="mi">196</span><span class="p">,</span>
  <span class="mi">135</span><span class="p">,</span><span class="mi">130</span><span class="p">,</span><span class="mi">116</span><span class="p">,</span><span class="mi">188</span><span class="p">,</span><span class="mi">159</span><span class="p">,</span><span class="mi">86</span><span class="p">,</span><span class="mi">164</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">109</span><span class="p">,</span><span class="mi">198</span><span class="p">,</span><span class="mi">173</span><span class="p">,</span><span class="mi">186</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span><span class="mi">64</span><span class="p">,</span><span class="mi">52</span><span class="p">,</span><span class="mi">217</span><span class="p">,</span><span class="mi">226</span><span class="p">,</span><span class="mi">250</span><span class="p">,</span><span class="mi">124</span><span class="p">,</span><span class="mi">123</span><span class="p">,</span>
  <span class="mi">5</span><span class="p">,</span><span class="mi">202</span><span class="p">,</span><span class="mi">38</span><span class="p">,</span><span class="mi">147</span><span class="p">,</span><span class="mi">118</span><span class="p">,</span><span class="mi">126</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">82</span><span class="p">,</span><span class="mi">85</span><span class="p">,</span><span class="mi">212</span><span class="p">,</span><span class="mi">207</span><span class="p">,</span><span class="mi">206</span><span class="p">,</span><span class="mi">59</span><span class="p">,</span><span class="mi">227</span><span class="p">,</span><span class="mi">47</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">58</span><span class="p">,</span><span class="mi">17</span><span class="p">,</span><span class="mi">182</span><span class="p">,</span><span class="mi">189</span><span class="p">,</span><span class="mi">28</span><span class="p">,</span><span class="mi">42</span><span class="p">,</span>
  <span class="mi">223</span><span class="p">,</span><span class="mi">183</span><span class="p">,</span><span class="mi">170</span><span class="p">,</span><span class="mi">213</span><span class="p">,</span><span class="mi">119</span><span class="p">,</span><span class="mi">248</span><span class="p">,</span><span class="mi">152</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span><span class="mi">44</span><span class="p">,</span><span class="mi">154</span><span class="p">,</span><span class="mi">163</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span><span class="mi">221</span><span class="p">,</span><span class="mi">153</span><span class="p">,</span><span class="mi">101</span><span class="p">,</span><span class="mi">155</span><span class="p">,</span><span class="mi">167</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span><span class="mi">172</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span>
  <span class="mi">129</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">39</span><span class="p">,</span><span class="mi">253</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span><span class="mi">98</span><span class="p">,</span><span class="mi">108</span><span class="p">,</span><span class="mi">110</span><span class="p">,</span><span class="mi">79</span><span class="p">,</span><span class="mi">113</span><span class="p">,</span><span class="mi">224</span><span class="p">,</span><span class="mi">232</span><span class="p">,</span><span class="mi">178</span><span class="p">,</span><span class="mi">185</span><span class="p">,</span> <span class="mi">112</span><span class="p">,</span><span class="mi">104</span><span class="p">,</span><span class="mi">218</span><span class="p">,</span><span class="mi">246</span><span class="p">,</span><span class="mi">97</span><span class="p">,</span><span class="mi">228</span><span class="p">,</span>
  <span class="mi">251</span><span class="p">,</span><span class="mi">34</span><span class="p">,</span><span class="mi">242</span><span class="p">,</span><span class="mi">193</span><span class="p">,</span><span class="mi">238</span><span class="p">,</span><span class="mi">210</span><span class="p">,</span><span class="mi">144</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">191</span><span class="p">,</span><span class="mi">179</span><span class="p">,</span><span class="mi">162</span><span class="p">,</span><span class="mi">241</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span><span class="mi">51</span><span class="p">,</span><span class="mi">145</span><span class="p">,</span><span class="mi">235</span><span class="p">,</span><span class="mi">249</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mi">239</span><span class="p">,</span><span class="mi">107</span><span class="p">,</span>
  <span class="mi">49</span><span class="p">,</span><span class="mi">192</span><span class="p">,</span><span class="mi">214</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span><span class="mi">181</span><span class="p">,</span><span class="mi">199</span><span class="p">,</span><span class="mi">106</span><span class="p">,</span><span class="mi">157</span><span class="p">,</span><span class="mi">184</span><span class="p">,</span> <span class="mi">84</span><span class="p">,</span><span class="mi">204</span><span class="p">,</span><span class="mi">176</span><span class="p">,</span><span class="mi">115</span><span class="p">,</span><span class="mi">121</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="mi">45</span><span class="p">,</span><span class="mi">127</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span><span class="mi">150</span><span class="p">,</span><span class="mi">254</span><span class="p">,</span>
  <span class="mi">138</span><span class="p">,</span><span class="mi">236</span><span class="p">,</span><span class="mi">205</span><span class="p">,</span><span class="mi">93</span><span class="p">,</span><span class="mi">222</span><span class="p">,</span><span class="mi">114</span><span class="p">,</span><span class="mi">67</span><span class="p">,</span><span class="mi">29</span><span class="p">,</span><span class="mi">24</span><span class="p">,</span><span class="mi">72</span><span class="p">,</span><span class="mi">243</span><span class="p">,</span><span class="mi">141</span><span class="p">,</span><span class="mi">128</span><span class="p">,</span><span class="mi">195</span><span class="p">,</span><span class="mi">78</span><span class="p">,</span><span class="mi">66</span><span class="p">,</span><span class="mi">215</span><span class="p">,</span><span class="mi">61</span><span class="p">,</span><span class="mi">156</span><span class="p">,</span><span class="mi">180</span><span class="p">];</span>
<span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">256</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">p</span><span class="p">[</span><span class="mi">256</span><span class="o">+</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">p</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">permutation</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> 
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">pNoise</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">X</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">255</span><span class="p">;</span> <span class="c1">// FIND UNIT SQUARE THAT</span>
  <span class="kd">let</span> <span class="nx">Y</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nx">y</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">255</span><span class="p">;</span> <span class="c1">// CONTAINS POINT.</span>
  <span class="kd">let</span> <span class="nx">Z</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nx">z</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">255</span><span class="p">;</span>
      <span class="nx">x</span> <span class="o">-=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>      <span class="c1">// FIND RELATIVE X,Y,Z</span>
      <span class="nx">y</span> <span class="o">-=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span>      <span class="c1">// OF POINT IN CUBE.</span>
      <span class="nx">z</span> <span class="o">-=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nx">z</span><span class="p">);</span>
  <span class="kd">let</span> <span class="nx">u</span> <span class="o">=</span> <span class="nf">fade</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>             <span class="c1">// COMPUTE FADE CURVES</span>
  <span class="kd">let</span> <span class="nx">v</span> <span class="o">=</span> <span class="nf">fade</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span>             <span class="c1">// FOR EACH OF X,Y.</span>
  <span class="kd">let</span> <span class="nx">w</span> <span class="o">=</span> <span class="nf">fade</span><span class="p">(</span><span class="nx">z</span><span class="p">);</span>
  <span class="kd">let</span> <span class="nx">A</span> <span class="o">=</span> <span class="nx">p</span><span class="p">[</span><span class="nx">X</span>  <span class="p">]</span><span class="o">+</span><span class="nx">Y</span><span class="p">,</span> <span class="nx">AA</span> <span class="o">=</span> <span class="nx">p</span><span class="p">[</span><span class="nx">A</span><span class="p">]</span><span class="o">+</span><span class="nx">Z</span><span class="p">,</span> <span class="nx">AB</span> <span class="o">=</span> <span class="nx">p</span><span class="p">[</span><span class="nx">A</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">Z</span><span class="p">,</span>  <span class="c1">// HASH COORDINATES OF</span>
      <span class="nx">B</span> <span class="o">=</span> <span class="nx">p</span><span class="p">[</span><span class="nx">X</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">Y</span><span class="p">,</span> <span class="nx">BA</span> <span class="o">=</span> <span class="nx">p</span><span class="p">[</span><span class="nx">B</span><span class="p">]</span><span class="o">+</span><span class="nx">Z</span><span class="p">,</span> <span class="nx">BB</span> <span class="o">=</span> <span class="nx">p</span><span class="p">[</span><span class="nx">B</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">Z</span><span class="p">;</span>  <span class="c1">// THE 4 SQUARE CORNERS,</span>

  <span class="k">return</span> <span class="nf">linerp</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nf">linerp</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span> <span class="nf">linerp</span><span class="p">(</span><span class="nx">u</span><span class="p">,</span> <span class="nf">grad</span><span class="p">(</span><span class="nx">p</span><span class="p">[</span><span class="nx">AA</span>  <span class="p">],</span> <span class="nx">x</span>  <span class="p">,</span> <span class="nx">y</span>  <span class="p">,</span> <span class="nx">z</span>   <span class="p">),</span>  <span class="c1">// AND ADD</span>
                                       <span class="nf">grad</span><span class="p">(</span><span class="nx">p</span><span class="p">[</span><span class="nx">BA</span>  <span class="p">],</span> <span class="nx">x</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nx">y</span>  <span class="p">,</span> <span class="nx">z</span>   <span class="p">)),</span> <span class="c1">// BLENDED</span>
                             <span class="nf">linerp</span><span class="p">(</span><span class="nx">u</span><span class="p">,</span> <span class="nf">grad</span><span class="p">(</span><span class="nx">p</span><span class="p">[</span><span class="nx">AB</span>  <span class="p">],</span> <span class="nx">x</span>  <span class="p">,</span> <span class="nx">y</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nx">z</span>   <span class="p">),</span>  <span class="c1">// RESULTS</span>
                                       <span class="nf">grad</span><span class="p">(</span><span class="nx">p</span><span class="p">[</span><span class="nx">BB</span>  <span class="p">],</span> <span class="nx">x</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nx">y</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nx">z</span>   <span class="p">))),</span><span class="c1">// FROM  8</span>
                   <span class="nf">linerp</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span> <span class="nf">linerp</span><span class="p">(</span><span class="nx">u</span><span class="p">,</span> <span class="nf">grad</span><span class="p">(</span><span class="nx">p</span><span class="p">[</span><span class="nx">AA</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="nx">x</span>  <span class="p">,</span> <span class="nx">y</span>  <span class="p">,</span> <span class="nx">z</span><span class="o">-</span><span class="mi">1</span> <span class="p">),</span>  <span class="c1">// CORNERS</span>
                                       <span class="nf">grad</span><span class="p">(</span><span class="nx">p</span><span class="p">[</span><span class="nx">BA</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="nx">x</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nx">y</span>  <span class="p">,</span> <span class="nx">z</span><span class="o">-</span><span class="mi">1</span> <span class="p">)),</span> <span class="c1">// OF CUBE</span>
                             <span class="nf">linerp</span><span class="p">(</span><span class="nx">u</span><span class="p">,</span> <span class="nf">grad</span><span class="p">(</span><span class="nx">p</span><span class="p">[</span><span class="nx">AB</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="nx">x</span>  <span class="p">,</span> <span class="nx">y</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nx">z</span><span class="o">-</span><span class="mi">1</span> <span class="p">),</span>
                                       <span class="nf">grad</span><span class="p">(</span><span class="nx">p</span><span class="p">[</span><span class="nx">BB</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="nx">x</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nx">y</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nx">z</span><span class="o">-</span><span class="mi">1</span> <span class="p">))));</span>
<span class="p">}</span>
   
<span class="kd">function</span> <span class="nf">fade</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">t</span> <span class="o">*</span> <span class="nx">t</span> <span class="o">*</span> <span class="nx">t</span> <span class="o">*</span> <span class="p">(</span><span class="nx">t</span> <span class="o">*</span> <span class="p">(</span><span class="nx">t</span> <span class="o">*</span> <span class="mi">6</span> <span class="o">-</span> <span class="mi">15</span><span class="p">)</span> <span class="o">+</span> <span class="mi">10</span><span class="p">);</span> <span class="p">}</span>
<span class="kd">function</span> <span class="nf">linerp</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">t</span> <span class="o">*</span> <span class="p">(</span><span class="nx">b</span> <span class="o">-</span> <span class="nx">a</span><span class="p">);</span> <span class="p">}</span>
<span class="kd">function</span> <span class="nf">grad</span><span class="p">(</span><span class="nx">hash</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">h</span> <span class="o">=</span> <span class="nx">hash</span> <span class="o">&amp;</span> <span class="mi">15</span><span class="p">;</span>    <span class="c1">// CONVERT LOW 4 BITS OF HASH CODE INTO 12 GRADIENT DIRECTIONS.</span>
  <span class="kd">let</span> <span class="nx">u</span> <span class="o">=</span> <span class="nx">h</span><span class="o">&lt;</span><span class="mi">8</span> <span class="p">?</span> <span class="nx">x</span> <span class="p">:</span> <span class="nx">y</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">v</span> <span class="o">=</span> <span class="nx">h</span><span class="o">&lt;</span><span class="mi">4</span> <span class="p">?</span> <span class="nx">y</span> <span class="p">:</span> <span class="nx">h</span><span class="o">==</span><span class="mi">12</span><span class="o">||</span><span class="nx">h</span><span class="o">==</span><span class="mi">14</span> <span class="p">?</span> <span class="nx">x</span> <span class="p">:</span> <span class="nx">z</span><span class="p">;</span>
  <span class="k">return </span><span class="p">((</span><span class="nx">h</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">?</span> <span class="nx">u</span> <span class="p">:</span> <span class="o">-</span><span class="nx">u</span><span class="p">)</span> <span class="o">+</span> <span class="p">((</span><span class="nx">h</span><span class="o">&amp;</span><span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">?</span> <span class="nx">v</span> <span class="p">:</span> <span class="o">-</span><span class="nx">v</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Taking a 2D slice of the 3D noise volume on a uniformly spaced grid (often also called a Lattice) of sample points gives the following image:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">setup</span><span class="p">(){</span>
  <span class="c1">//draw grid of noise values</span>
  <span class="nf">createCanvas</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span><span class="mi">80</span><span class="p">);</span>
  <span class="nf">background</span><span class="p">(</span><span class="mi">255</span><span class="p">);</span>
  
  <span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">width</span><span class="o">*</span><span class="nx">height</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="nf">noStroke</span><span class="p">();</span>
    <span class="nf">fill</span><span class="p">((</span><span class="nf">pNoise</span><span class="p">(</span><span class="nx">i</span><span class="o">%</span><span class="nx">width</span><span class="o">+</span><span class="mf">0.3</span><span class="p">,</span> <span class="o">~~</span><span class="p">(</span><span class="nx">i</span><span class="o">/</span><span class="nx">height</span><span class="p">)</span><span class="o">+</span><span class="mf">0.4</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">128</span><span class="p">);</span>
    <span class="nf">square</span><span class="p">(</span><span class="nx">i</span><span class="o">%</span><span class="nx">width</span><span class="p">,</span> <span class="o">~~</span><span class="p">(</span><span class="nx">i</span><span class="o">/</span><span class="nx">height</span><span class="p">),</span> <span class="mi">2</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/posts/perlin-worms/perlin_noise_80x80%201-480.webp 480w,/assets/img/posts/perlin-worms/perlin_noise_80x80%201-800.webp 800w,/assets/img/posts/perlin-worms/perlin_noise_80x80%201-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/posts/perlin-worms/perlin_noise_80x80%201.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" style="margin:auto; display:block;
            
            
            
                max-width: 400px;
            
            
            " loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

<p>The sharp contrast between cells (pixels) is due to the coarse sampling of grid points. If we were to sample in a more continual sweep across the space, we would get smooth boundaries due to the spline interpolation used within the algorithm. The following image illustrates this for a finer grid.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">setup</span><span class="p">(){</span>
  <span class="c1">//draw grid of noise values</span>
  <span class="nf">createCanvas</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span><span class="mi">80</span><span class="p">);</span>
  <span class="nf">background</span><span class="p">(</span><span class="mi">255</span><span class="p">);</span>
  
  <span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="o">*</span><span class="nx">width</span><span class="o">*</span><span class="nx">height</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">j</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">){</span>
      <span class="nf">noStroke</span><span class="p">();</span>
      <span class="nf">fill</span><span class="p">((</span><span class="nf">pNoise</span><span class="p">(</span><span class="nx">i</span><span class="o">%</span><span class="nx">width</span><span class="o">+</span><span class="mf">0.1</span><span class="o">*</span><span class="nx">j</span><span class="p">,</span> <span class="o">~~</span><span class="p">(</span><span class="nx">i</span><span class="o">/</span><span class="nx">height</span><span class="p">)</span><span class="o">/</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">128</span><span class="p">);</span>
      <span class="nf">square</span><span class="p">(</span><span class="nx">i</span><span class="o">%</span><span class="nx">width</span><span class="o">+</span><span class="mf">0.1</span><span class="o">*</span><span class="nx">j</span><span class="p">,</span> <span class="o">~~</span><span class="p">(</span><span class="nx">i</span><span class="o">/</span><span class="nx">height</span><span class="p">)</span><span class="o">/</span><span class="mi">10</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/posts/perlin-worms/perlin_noise_80x80_super-480.webp 480w,/assets/img/posts/perlin-worms/perlin_noise_80x80_super-800.webp 800w,/assets/img/posts/perlin-worms/perlin_noise_80x80_super-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/posts/perlin-worms/perlin_noise_80x80_super.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" style="margin:auto; display:block;
            
            
            
                max-width: 400px;
            
            
            " loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

<h1 id="constructing-the-worms">Constructing the worms</h1>
<p>Given our noise domain (defined above) we can construct the worms. To do this, a <em>lookup line segment</em> is placed within a noise domain (e.g., Perlin Noise is used here as it gives a coherent space) and used it to perform directional lookups at sample points along its length. These sample points correspond to segments on the worm and are used to orient each relative to the previous segment along the worm.</p>

<p>The following code defines a simple worm class, a sampling segment, and a loop for rendering the worm based on the noise samples drawn from the segment.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Worm</span><span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">seg</span> <span class="o">=</span> <span class="p">[</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">];</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">len</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">seg</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">c</span> <span class="o">=</span> <span class="nx">c</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="nf">grow</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">seg</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">len</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">len</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="nf">display</span><span class="p">(){</span>
    <span class="kd">let</span> <span class="nx">girth</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">min</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">len</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span>
    <span class="c1">//draw the worm segment by segment    </span>
    <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="nx">i</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">len</span><span class="o">-</span><span class="mi">2</span><span class="p">){</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">len</span><span class="o">/</span><span class="mi">2</span><span class="p">){</span>
        <span class="nf">strokeWeight</span><span class="p">(</span><span class="nx">girth</span><span class="o">*</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="nx">i</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">len</span><span class="p">));</span>
      <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="nf">strokeWeight</span><span class="p">(</span><span class="nx">girth</span><span class="o">*</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">len</span><span class="o">-</span><span class="nx">i</span><span class="p">)</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">len</span><span class="p">));</span>
      <span class="p">}</span>
      <span class="nf">stroke</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">c</span><span class="p">);</span>
      <span class="nf">line</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">seg</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="k">this</span><span class="p">.</span><span class="nx">seg</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span><span class="k">this</span><span class="p">.</span><span class="nx">seg</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="k">this</span><span class="p">.</span><span class="nx">seg</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]);</span>
      <span class="nx">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">setup</span><span class="p">(){</span>
  <span class="nf">createCanvas</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span><span class="mi">500</span><span class="p">);</span>
  <span class="nf">background</span><span class="p">(</span><span class="mi">255</span><span class="p">);</span>
  <span class="nf">angleMode</span><span class="p">(</span><span class="nx">RADIANS</span><span class="p">);</span>
  
  <span class="kd">let</span> <span class="nx">w</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Worm</span><span class="p">(</span><span class="nf">random</span><span class="p">(</span><span class="mi">150</span><span class="p">,</span><span class="mi">350</span><span class="p">),</span><span class="nf">random</span><span class="p">(</span><span class="mi">150</span><span class="p">,</span><span class="mi">350</span><span class="p">),</span><span class="dl">'</span><span class="s1">#967445</span><span class="dl">'</span><span class="p">);</span> 
  <span class="kd">let</span> <span class="nx">lsegXmax</span> <span class="o">=</span> <span class="nf">random</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">240</span><span class="p">);</span>
  <span class="kd">let</span> <span class="nx">lsegX</span> <span class="o">=</span> <span class="p">(</span><span class="nx">lsegXmax</span><span class="o">-</span><span class="mi">10</span><span class="p">)</span><span class="o">/</span><span class="nx">maxLen</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">lsegY</span> <span class="o">=</span> <span class="nf">random</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">);</span>
  
  <span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">30</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="kd">let</span> <span class="nx">segLen</span> <span class="o">=</span> <span class="nf">random</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">20</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">pN</span> <span class="o">=</span> <span class="nf">pNoise</span><span class="p">(</span><span class="nx">lsegX</span><span class="o">*</span><span class="nx">i</span><span class="p">,</span><span class="nx">lsegY</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">dx</span> <span class="o">=</span> <span class="nx">segLen</span><span class="o">*</span><span class="nf">cos</span><span class="p">(</span><span class="nx">PI</span><span class="o">*</span><span class="p">(</span><span class="nx">pN</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
    <span class="kd">let</span> <span class="nx">dy</span> <span class="o">=</span> <span class="nx">segLen</span><span class="o">*</span><span class="nf">sin</span><span class="p">(</span><span class="nx">PI</span><span class="o">*</span><span class="p">(</span><span class="nx">pN</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">dx</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">w</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">dx</span> <span class="o">&gt;</span> <span class="nx">width</span><span class="p">){</span>  <span class="c1">//boundary detection</span>
      <span class="nx">dx</span> <span class="o">=</span> <span class="o">-</span><span class="nx">dx</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">dy</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">w</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">dy</span> <span class="o">&gt;</span> <span class="nx">height</span><span class="p">){</span>
      <span class="nx">dy</span> <span class="o">=</span> <span class="o">-</span><span class="nx">dy</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">w</span><span class="p">.</span><span class="nf">grow</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">dx</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">dy</span><span class="p">);</span>  <span class="c1">//add segment to worm</span>
  <span class="p">}</span>
  <span class="nx">w</span><span class="p">.</span><span class="nf">display</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here are two examples for the kinds of worms that can be generated using this simple script and method for two different randomly placed segments within the same noise volume. The worm that turns smoothly, that is does not jitter, results from a finely divided lookup segment in the noise domain, and vise versa for the worm with lots of jitter.</p>

<p>As can be seen, generating procedural objects like these is incredibly simple and the method achieves a good amount of diversity in generation.</p>

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/posts/perlin-worms/perlin_worm%202-480.webp 480w,/assets/img/posts/perlin-worms/perlin_worm%202-800.webp 800w,/assets/img/posts/perlin-worms/perlin_worm%202-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/posts/perlin-worms/perlin_worm%202.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" style="margin:auto; display:block;
            
            
            
                max-width: 400px;
            
            
            " loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/posts/perlin-worms/perlin_worm_smooth%201-480.webp 480w,/assets/img/posts/perlin-worms/perlin_worm_smooth%201-800.webp 800w,/assets/img/posts/perlin-worms/perlin_worm_smooth%201-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/posts/perlin-worms/perlin_worm_smooth%201.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" style="margin:auto; display:block;
            
            
            
                max-width: 400px;
            
            
            " loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

<p>This method, which is quite bear bones, can be further modified to generate worms with directional bias to give increasingly varied results.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">setup</span><span class="p">(){</span>
  <span class="nf">createCanvas</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span><span class="mi">500</span><span class="p">);</span>
  <span class="nf">angleMode</span><span class="p">(</span><span class="nx">RADIANS</span><span class="p">);</span>
  
  <span class="kd">let</span> <span class="nx">nWorms</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">maxLen</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>
  
  <span class="c1">//create array of worms</span>
  <span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">n</span><span class="o">&lt;</span><span class="nx">nWorms</span><span class="p">;</span> <span class="nx">n</span><span class="o">++</span><span class="p">){</span>
    <span class="kd">let</span> <span class="nx">w</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Worm</span><span class="p">(</span><span class="nf">random</span><span class="p">(</span><span class="mi">150</span><span class="p">,</span><span class="mi">350</span><span class="p">),</span><span class="nf">random</span><span class="p">(</span><span class="mi">150</span><span class="p">,</span><span class="mi">350</span><span class="p">),</span><span class="dl">'</span><span class="s1">#967445</span><span class="dl">'</span><span class="p">);</span> 
    <span class="kd">let</span> <span class="nx">lsegXstart</span> <span class="o">=</span> <span class="nf">random</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">240</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">lsegXend</span> <span class="o">=</span> <span class="nf">random</span><span class="p">(</span><span class="nx">lsegXstart</span><span class="p">,</span><span class="nx">lsegXstart</span><span class="o">+</span><span class="mi">10</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">lsegX</span> <span class="o">=</span> <span class="p">(</span><span class="nx">lsegXend</span><span class="o">-</span><span class="nx">lsegXstart</span><span class="p">)</span><span class="o">/</span><span class="nx">maxLen</span><span class="p">;</span>
    <span class="kd">let</span> <span class="nx">lsegY</span> <span class="o">=</span> <span class="nf">random</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">lsegZ</span> <span class="o">=</span> <span class="nf">random</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">255</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">xBias</span> <span class="o">=</span> <span class="nf">random</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mf">1.5</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">yBias</span> <span class="o">=</span> <span class="nf">random</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mf">1.5</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">maxLen</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
      <span class="kd">let</span> <span class="nx">segLen</span> <span class="o">=</span> <span class="nf">random</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span>
      <span class="kd">let</span> <span class="nx">pN</span> <span class="o">=</span> <span class="nf">pNoise</span><span class="p">(</span><span class="nx">lsegX</span><span class="o">*</span><span class="nx">i</span><span class="p">,</span><span class="nx">lsegY</span><span class="p">,</span><span class="nx">lsegZ</span><span class="p">);</span>
      <span class="kd">let</span> <span class="nx">dx</span> <span class="o">=</span> <span class="nx">segLen</span><span class="o">*</span><span class="nf">cos</span><span class="p">(</span><span class="nx">xBias</span><span class="o">*</span><span class="nx">PI</span><span class="o">*</span><span class="p">(</span><span class="nx">pN</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
      <span class="kd">let</span> <span class="nx">dy</span> <span class="o">=</span> <span class="nx">segLen</span><span class="o">*</span><span class="nf">sin</span><span class="p">(</span><span class="nx">yBias</span><span class="o">*</span><span class="nx">PI</span><span class="o">*</span><span class="p">(</span><span class="nx">pN</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">dx</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">w</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">dx</span> <span class="o">&gt;</span> <span class="nx">width</span><span class="p">){</span>  <span class="c1">//boundary detection</span>
        <span class="nx">dx</span> <span class="o">=</span> <span class="o">-</span><span class="nx">dx</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">dy</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">w</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">dy</span> <span class="o">&gt;</span> <span class="nx">height</span><span class="p">){</span>
        <span class="nx">dy</span> <span class="o">=</span> <span class="o">-</span><span class="nx">dy</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="nx">w</span><span class="p">.</span><span class="nf">grow</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">dx</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">dy</span><span class="p">);</span>  <span class="c1">//add segment to worm</span>
    <span class="p">}</span>
    <span class="nx">w</span><span class="p">.</span><span class="nf">display</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/posts/perlin-worms/perlin_worms_2%201-480.webp 480w,/assets/img/posts/perlin-worms/perlin_worms_2%201-800.webp 800w,/assets/img/posts/perlin-worms/perlin_worms_2%201-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/posts/perlin-worms/perlin_worms_2%201.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" style="margin:auto; display:block;
            
            
            
                max-width: 400px;
            
            
            " loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/posts/perlin-worms/perlin_worms_3-480.webp 480w,/assets/img/posts/perlin-worms/perlin_worms_3-800.webp 800w,/assets/img/posts/perlin-worms/perlin_worms_3-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/posts/perlin-worms/perlin_worms_3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" style="margin:auto; display:block;
            
            
            
                max-width: 400px;
            
            
            " loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

<p>By implementing different distance bias expressions for \(dx\) and \(dy\), respectively the displacement in \(x\) and \(y\), a wide range of different appearances can be achieved.</p>

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/posts/perlin-worms/perlin_worms_dist_bias_5-480.webp 480w,/assets/img/posts/perlin-worms/perlin_worms_dist_bias_5-800.webp 800w,/assets/img/posts/perlin-worms/perlin_worms_dist_bias_5-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/posts/perlin-worms/perlin_worms_dist_bias_5.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" style="margin:auto; display:block;
            
            
            
                max-width: 400px;
            
            
            " loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/posts/perlin-worms/perlin_worms_dist_bias_1-480.webp 480w,/assets/img/posts/perlin-worms/perlin_worms_dist_bias_1-800.webp 800w,/assets/img/posts/perlin-worms/perlin_worms_dist_bias_1-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/posts/perlin-worms/perlin_worms_dist_bias_1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" style="margin:auto; display:block;
            
            
            
                max-width: 400px;
            
            
            " loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/posts/perlin-worms/perlin_worms_dist_bias_7-480.webp 480w,/assets/img/posts/perlin-worms/perlin_worms_dist_bias_7-800.webp 800w,/assets/img/posts/perlin-worms/perlin_worms_dist_bias_7-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/posts/perlin-worms/perlin_worms_dist_bias_7.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" style="margin:auto; display:block;
            
            
            
                max-width: 400px;
            
            
            " loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

<h2 id="animating-the-worms">Animating the worms</h2>
<p>Due to Perlin noise being a source of coherent noise, meaning its output changes smoothly and proportionately with small and large changes in input, worms can be smoothly animated by gradually translating their lookup segments within the noise domain and accordingly updating segments along the worms.</p>

<p>The following code animates a singular worm using the simple method proposed above.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">nWorms</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>    <span class="c1">// number of worms</span>
<span class="kd">let</span> <span class="nx">maxLen</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>    <span class="c1">// number of segments on a worm </span>
<span class="kd">let</span> <span class="nx">worms</span> <span class="o">=</span> <span class="p">[];</span>     <span class="c1">// array of worms</span>
<span class="kd">let</span> <span class="nx">segMaxLen</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="c1">// lookup segment max length</span>
<span class="kd">let</span> <span class="nx">segs</span>  <span class="o">=</span> <span class="p">[];</span>     <span class="c1">// array of lookup segments [..., x, y, z, div, xBias, yBias, ...]</span>
<span class="kd">let</span> <span class="nx">dirVec</span> <span class="o">=</span> <span class="p">[];</span>    <span class="c1">// array of direction vectors for lookup segment translation</span>


<span class="kd">function</span> <span class="nf">setup</span><span class="p">(){</span>
  <span class="nf">createCanvas</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span><span class="mi">500</span><span class="p">);</span>  <span class="c1">//set up window</span>
  <span class="nf">angleMode</span><span class="p">(</span><span class="nx">RADIANS</span><span class="p">);</span>
  
  <span class="c1">//create array of worms</span>
  <span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">n</span><span class="o">&lt;</span><span class="nx">nWorms</span><span class="p">;</span> <span class="nx">n</span><span class="o">++</span><span class="p">){</span>
    <span class="nx">worms</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Worm</span><span class="p">(</span><span class="nf">random</span><span class="p">(</span><span class="mi">150</span><span class="p">,</span><span class="mi">350</span><span class="p">),</span><span class="nf">random</span><span class="p">(</span><span class="mi">150</span><span class="p">,</span><span class="mi">350</span><span class="p">),</span><span class="dl">'</span><span class="s1">#967445</span><span class="dl">'</span><span class="p">);</span> 
    <span class="nx">segs</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">6</span>  <span class="p">]</span> <span class="o">=</span> <span class="nf">random</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">240</span><span class="p">);</span>
    <span class="nx">segs</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">6</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nf">random</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">255</span><span class="p">);</span>
    <span class="nx">segs</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">6</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="nf">random</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">255</span><span class="p">);</span>
    <span class="nx">segs</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">6</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nf">random</span><span class="p">(</span><span class="nx">segs</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">5</span><span class="p">],</span><span class="nx">segs</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">5</span><span class="p">]</span><span class="o">+</span><span class="nx">segMaxLen</span><span class="p">)</span><span class="o">-</span><span class="nx">segs</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">5</span><span class="p">])</span><span class="o">/</span><span class="nx">maxLen</span><span class="p">;</span>
    <span class="nx">segs</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">6</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="nf">random</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mf">1.5</span><span class="p">);</span>
    <span class="nx">segs</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">6</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="nf">random</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mf">1.5</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">maxLen</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
      <span class="kd">let</span> <span class="nx">segLen</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span> <span class="c1">//random(5,10);</span>
      <span class="kd">let</span> <span class="nx">pN</span> <span class="o">=</span> <span class="nf">pNoise</span><span class="p">(</span><span class="nx">segs</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">6</span><span class="p">]</span><span class="o">+</span><span class="nx">segs</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">6</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">*</span><span class="nx">i</span><span class="p">,</span><span class="nx">segs</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">6</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">segs</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">6</span><span class="o">+</span><span class="mi">2</span><span class="p">]);</span>
      <span class="kd">let</span> <span class="nx">dx</span> <span class="o">=</span> <span class="nx">segLen</span><span class="o">*</span><span class="nf">cos</span><span class="p">(</span><span class="nx">segs</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">6</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">*</span><span class="nx">PI</span><span class="o">*</span><span class="p">(</span><span class="nx">pN</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
      <span class="kd">let</span> <span class="nx">dy</span> <span class="o">=</span> <span class="nx">segLen</span><span class="o">*</span><span class="nf">sin</span><span class="p">(</span><span class="nx">segs</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">6</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="nx">PI</span><span class="o">*</span><span class="p">(</span><span class="nx">pN</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">worms</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">x</span><span class="o">+</span><span class="nx">dx</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">worms</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">x</span><span class="o">+</span><span class="nx">dx</span> <span class="o">&gt;</span> <span class="nx">width</span><span class="p">){</span>  <span class="c1">//boundary detection</span>
        <span class="nx">dx</span> <span class="o">=</span> <span class="o">-</span><span class="nx">dx</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">worms</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">y</span><span class="o">+</span><span class="nx">dy</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">worms</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">y</span><span class="o">+</span><span class="nx">dy</span> <span class="o">&gt;</span> <span class="nx">height</span><span class="p">){</span>
        <span class="nx">dy</span> <span class="o">=</span> <span class="o">-</span><span class="nx">dy</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="nx">worms</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nf">grow</span><span class="p">(</span><span class="nx">worms</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">x</span><span class="o">+</span><span class="nx">dx</span><span class="p">,</span><span class="nx">worms</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">y</span><span class="o">+</span><span class="nx">dy</span><span class="p">);</span>  <span class="c1">//add segment to worm</span>
    <span class="p">}</span>
    <span class="nx">worms</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nf">display</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">draw</span><span class="p">(){</span>
  <span class="nf">frameRate</span><span class="p">(</span><span class="mi">30</span><span class="p">);</span>
  <span class="nf">clear</span><span class="p">();</span>
  
  <span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">n</span><span class="o">&lt;</span><span class="nx">nWorms</span><span class="p">;</span> <span class="nx">n</span><span class="o">++</span><span class="p">){</span>
    <span class="kd">let</span> <span class="nx">dirX</span> <span class="o">=</span> <span class="mf">0.05</span><span class="p">;</span>
    <span class="kd">let</span> <span class="nx">dirY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kd">let</span> <span class="nx">dirZ</span> <span class="o">=</span> <span class="mf">0.01</span><span class="p">;</span>
    
    <span class="nx">segs</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">6</span>  <span class="p">]</span> <span class="o">+=</span> <span class="nx">dirX</span><span class="p">;</span>
    <span class="nx">segs</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">6</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">dirY</span><span class="p">;</span>
    <span class="nx">segs</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">6</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">dirZ</span><span class="p">;</span>
    
    <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">worms</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">len</span><span class="p">){</span>
      <span class="kd">let</span> <span class="nx">segLen</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
      <span class="kd">let</span> <span class="nx">pN</span> <span class="o">=</span> <span class="nf">pNoise</span><span class="p">(</span><span class="nx">segs</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">6</span><span class="p">]</span><span class="o">+</span><span class="nx">segs</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">6</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">*</span><span class="nx">i</span><span class="p">,</span><span class="nx">segs</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">6</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">segs</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">6</span><span class="o">+</span><span class="mi">2</span><span class="p">]);</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
        <span class="kd">let</span> <span class="nx">dx</span> <span class="o">=</span> <span class="nf">cos</span><span class="p">(</span><span class="nx">segs</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">6</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">*</span><span class="nx">PI</span><span class="o">*</span><span class="p">(</span><span class="nx">pN</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
        <span class="kd">let</span> <span class="nx">dy</span> <span class="o">=</span> <span class="nf">sin</span><span class="p">(</span><span class="nx">segs</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">6</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="nx">PI</span><span class="o">*</span><span class="p">(</span><span class="nx">pN</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">worms</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">seg</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">+</span><span class="nx">dx</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">worms</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">seg</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">+</span><span class="nx">dx</span> <span class="o">&gt;</span> <span class="nx">width</span><span class="p">){</span>  <span class="c1">//boundary detection</span>
          <span class="nx">dx</span> <span class="o">=</span> <span class="o">-</span><span class="nx">dx</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">worms</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">seg</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">dy</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">worms</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">seg</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">dy</span> <span class="o">&gt;</span> <span class="nx">height</span><span class="p">){</span>
          <span class="nx">dy</span> <span class="o">=</span> <span class="o">-</span><span class="nx">dy</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nx">worms</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">seg</span><span class="p">[</span><span class="nx">i</span>  <span class="p">]</span> <span class="o">+=</span> <span class="nx">dx</span><span class="p">;</span>
        <span class="nx">worms</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">seg</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">dy</span><span class="p">;</span> 
      <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="c1">//segLen = dist(worms[n].seg[2*i-2],worms[n].seg[2*i-1],worms[n].seg[2*i],worms[n].seg[2*i+1]);</span>
        <span class="kd">let</span> <span class="nx">dx</span> <span class="o">=</span> <span class="nx">segLen</span><span class="o">*</span><span class="nf">cos</span><span class="p">(</span><span class="nx">segs</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">6</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">*</span><span class="nx">PI</span><span class="o">*</span><span class="p">(</span><span class="nx">pN</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
        <span class="kd">let</span> <span class="nx">dy</span> <span class="o">=</span> <span class="nx">segLen</span><span class="o">*</span><span class="nf">sin</span><span class="p">(</span><span class="nx">segs</span><span class="p">[</span><span class="nx">n</span><span class="o">*</span><span class="mi">6</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="nx">PI</span><span class="o">*</span><span class="p">(</span><span class="nx">pN</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">worms</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">seg</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="nx">i</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="nx">dx</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">worms</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">seg</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="nx">i</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="nx">dx</span> <span class="o">&gt;</span> <span class="nx">width</span><span class="p">){</span>  <span class="c1">//boundary detection</span>
          <span class="nx">dx</span> <span class="o">=</span> <span class="o">-</span><span class="nx">dx</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">worms</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">seg</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">dy</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">worms</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">seg</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">dy</span> <span class="o">&gt;</span> <span class="nx">height</span><span class="p">){</span>
          <span class="nx">dy</span> <span class="o">=</span> <span class="o">-</span><span class="nx">dy</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nx">worms</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">seg</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="nx">i</span>  <span class="p">]</span> <span class="o">=</span> <span class="nx">worms</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">seg</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="nx">i</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="nx">dx</span><span class="p">;</span>
        <span class="nx">worms</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">seg</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">worms</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">seg</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">dy</span><span class="p">;</span> 
      <span class="p">}</span>
      <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">worms</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nf">display</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/posts/perlin-worms/perlin_worms_1-480.webp 480w,/assets/img/posts/perlin-worms/perlin_worms_1-800.webp 800w,/assets/img/posts/perlin-worms/perlin_worms_1-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/posts/perlin-worms/perlin_worms_1.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" style="margin:auto; display:block;
            
            
            
                max-width: 400px;
            
            
            " loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

<p><em>Disgusting</em>.</p>

<h2 id="animating-other-objects-using-noise">Animating other objects using noise</h2>
<p>This method of pseudo-random animation is not limited to line segments but can be applied to any set of vertices by associating each to a moving point in the noise domain.</p>]]></content><author><name></name></author><category term="graphics" /><category term="procedural_generation" /><summary type="html"><![CDATA[The impetus for this post came from my personal struggles to find a solid reference and working code demonstration of what are called “noise worms”, as I had stumbled upon an illustration and brief description of them when researching some early (2000’s era) procedural generation techniques. The best write up I came across is that given on libnoise from which this post is inspired.]]></summary></entry></feed>